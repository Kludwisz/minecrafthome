name: Check .bin File Permissions
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
 

jobs:
  check_permissions:
    name: executables-filecheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5

    - name: Install dependencies (if any)
      run: |
        python3 -m pip install --upgrade pip
 

    - name: Check apps
      id: run_script_apps
      run: |
        python3 ci_tools/executable-check.py > output_apps.txt
        echo "failed_apps=$(grep -c " - " output_apps.txt)" >> $GITHUB_ENV
      env:
        # Replace with the directory you want to check
        DIRECTORY_TO_CHECK: images/makeproject/project/apps

    - name: Check for failed files
      if: ${{ env.failed_apps != '0' }} 
      run: |
        echo "::error title=Missing executable permissions::Found .bin files without executable permissions.  See output for details."
        cat output_apps.txt
        exit 1
 

    - name: Success (if no failed files)
      if: ${{ env.failed_apps == '0' }} 
      run: echo "All .bin files have executable permissions (or no .bin files found)."

  check_bin_permissions:
    name: executables-project-filecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Install dependencies (if any)
        run: |
          python3 -m pip install --upgrade pip
 

      - name: Check apps
        id: run_bin_permissions
        run: |
          python3 ci_tools/executable-check.py > output_bin.txt
          echo "failed_bin=$(grep -c " - " output_bin.txt)" >> $GITHUB_ENV
        env:
          # Replace with the directory you want to check
          DIRECTORY_TO_CHECK: images/makeproject/project/bin

      - name: Check for failed files
        if: ${{ env.failed_bin != '0' }} 
        run: |
          echo "::error title=Permission error::Files found without executable permissions:"
          cat output_bin.txt
          exit 1
 

      - name: Success (if no failed files)
        if: ${{ env.failed_bin == '0' }} 
        run: echo "All version.xml files look correct (or we did not find any)."
  
  check_versionxml:
    name: Check version.xml version number references
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Install dependencies (if any)
        run: |
          python3 -m pip install --upgrade pip
 

      - name: Check apps
        id: run_xml_check_script
        run: |
          python3 ci_tools/version-xml-check.py > output_xml.txt
          echo "failed_xml=$(grep -c " - " output_xml.txt)" >> $GITHUB_ENV
        env:
          # Replace with the directory you want to check
          DIRECTORY_TO_CHECK: images/makeproject/project/apps

      - name: Check for failed files
        if: ${{ env.failed_xml != '0' }} 
        run: |
          echo "::error title=Version mismatch::Found xml files with mismatched version number from parent directory.  See output for details."
          cat output_xml.txt
          exit 1
 

      - name: Success (if no failed files)
        if: ${{ env.failed_xml == '0' }} 
        run: echo "All version.xml files look correct (or we did not find any)."

  check_version_files:
    name: Check Version.xml file references
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Install dependencies (if any)
        run: |
          python3 -m pip install --upgrade pip
 

      - name: Check apps
        id: run_xml_check_script
        run: |
          python3 ci_tools/version-xml-check-file-exist.py > output_xml_exist.txt
          echo "failed_xml_exist=$(grep -c " - " output_xml_exist.txt)" >> $GITHUB_ENV
        env:
          # Replace with the directory you want to check
          DIRECTORY_TO_CHECK: images/makeproject/project/apps

      - name: Check for failed files
        if: ${{ env.failed_xml_exist != '0' }} 
        run: |
          echo "::error title=Version mismatch::Found xml files with mismatched version number from parent directory.  See output for details."
          cat output_xml_exist.txt
          exit 1
 

      - name: Success (if no failed files)
        if: ${{ env.failed_xml_exist == '0' }} 
        run: echo "All version.xml files look correct (or we did not find any)."

  check_binary_arches:
    name: Check binary architectures
    runs-on: ubuntu-latest
    steps:
      - name: Checkout github repo
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-python@v5
      - name: Install dependencies (if any)
        run: |
          python3 -m pip install --upgrade pip
 

      - name: Check apps
        id: run_bin_arch_script
        run: |
          python3 ci_tools/executable-arch-check.py > output_binary_arch.txt
          echo "failed_binary_arch=$(grep -c " - " output_binary_arch.txt)" >> $GITHUB_ENV
        env:
          # Replace with the directory you want to check
          DIRECTORY_TO_CHECK: images/makeproject/project/apps

      - name: Check for failed files
        if: ${{ env.failed_binary_arch != '0' }} 
        run: |
          echo "::error title=Architecture mismatch::Found binary files with mismatched Architecture from parent directory.  See output for details."
          cat output_binary_arch.txt
          exit 1
 

      - name: Success (if no failed files)
        if: ${{ env.failed_binary_arch == '0' }} 
        run: echo "All binary files look correct (or we did not find any)."

  check_binary_glibc:
    name: Check binary GLIBC dependency version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout github repo
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-python@v5
      - name: Install dependencies (if any)
        run: |
          python3 -m pip install --upgrade pip
 

      - name: Check apps
        id: run_bin_glibc_script
        run: |
          python3 ci_tools/executable-glibc-check.py > output.txt
          echo "failed_binary_glibc=$(grep -c " - " output.txt)" >> $GITHUB_ENV
        env:
          # Replace with the directory you want to check
          DIRECTORY_TO_CHECK: images/makeproject/project/apps
          GLIBC_LIMIT: 229

      - name: Check for failed files
        if: ${{ env.failed_binary_glibc != '0' }} 
        run: |
          echo "::error title=GLIBC mismatch::Found binary files with GLIBC over limit. See output for details."
          cat output.txt
          exit 1


      - name: Success (if no failed files)
        if: ${{ env.failed_binary_glibc == '0' }} 
        run: echo "All binary files look correct (or we did not find any)."


  py_lint:
    name: check_python_syntax
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: cclauss/Find-Python-syntax-errors-action@master

  sh_lint:
    name: check_shell_syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: Azbagheri/shell-linter@latest
